using System;
using Microsoft.Extensions.Options;
using TehGM.Wolfringo.Utilities;

namespace TehGM.Wolfringo.Hosting.Services
{
    /// <summary>A WOLF token provider that supports both options as well as registered provider.</summary>
    /// <remarks><para>This token provider reads options to get pre-configured token. If options do not provide the token, a <see cref="IWolfTokenProvider"/> instance registered with DI will be used.</para>
    /// <para>Value generated by <see cref="IWolfTokenProvider"/> is cached internally on a per-instance basis, so all reconnections use the same token.</para></remarks>
    public class HostedWolfTokenProvider : IWolfTokenProvider
    {
        private readonly IWolfTokenProvider _baseProvider;
        private readonly IOptionsMonitor<HostedWolfClientOptions> _options;
        private readonly Lazy<string> _cachedProviderToken;

        /// <summary>Creates a new WOLF token provider that supports both options as well as registered provider.</summary>
        /// <param name="options">Options instance to read token from.</param>
        /// <param name="baseTokenProvider">Token provider to use when <paramref name="options"/> don't provide any token.</param>
        public HostedWolfTokenProvider(IOptionsMonitor<HostedWolfClientOptions> options, IWolfTokenProvider baseTokenProvider)
        {
            this._baseProvider = baseTokenProvider;
            this._options = options;
            this._cachedProviderToken = new Lazy<string>(() => this._baseProvider?.GetToken());
        }

        /// <inheritdoc/>
        /// <remarks><para>Value in <see cref="HostedWolfClientOptions"/> takes priority. If not provided, a <see cref="IWolfTokenProvider"/> instance registered with DI will be used.</para>
        /// <para>Value generated by <see cref="IWolfTokenProvider"/> is cached internally on a per-instance basis, so all reconnections use the same token.</para></remarks>
        public string GetToken()
        {
            HostedWolfClientOptions options = this._options.CurrentValue;
            if (!string.IsNullOrWhiteSpace(options.Token))
                return options.Token;
            return this._cachedProviderToken.Value;
        }
    }
}
